#!/usr/bin/env python3
"""
Final test of the Intelligent JAA Agent with Claude Opus 4 + LangGraph
Creates a mock conversation to test the complete workflow
"""
import json
import os
from datetime import datetime

from dotenv import load_dotenv

from agents.jaa.agent import JobAssessmentAgent
from database_simple import db


# Load environment variables
load_dotenv(os.path.join(os.path.dirname(__file__), "..", ".env"))

def create_mock_conversation():
    """Create a mock conversation for testing"""
    print("\n[MOCK] Creating test conversation...")

    # Mock conversation data that would come from CIA
    mock_conversation = {
        "thread_id": f"intelligent_jaa_test_{int(datetime.now().timestamp())}",
        "user_id": "00000000-0000-0000-0000-000000000000",
        "agent_type": "CIA",
        "state": {
            "messages": [
                {
                    "role": "user",
                    "content": "I need to remodel my kitchen. It's about 200 square feet and I want new cabinets, countertops, and appliances. My budget is around $35,000 to $50,000."
                },
                {
                    "role": "assistant",
                    "content": "That sounds like an exciting kitchen remodel! Can you tell me more about your timeline and any specific style preferences?"
                },
                {
                    "role": "user",
                    "content": "I'd like to start in about 2 months. I prefer modern style with white cabinets and quartz countertops. The appliances should be stainless steel."
                }
            ],
            "collected_info": {
                "project_type": "kitchen",
                "budget_range": "$35,000-$50,000",
                "timeline": "2 months",
                "size": "200 sq ft",
                "style_preferences": "modern, white cabinets, quartz countertops, stainless steel appliances"
            },
            "phase": "complete",
            "ready_for_jaa": True
        },
        "created_at": datetime.now().isoformat(),
        "updated_at": datetime.now().isoformat()
    }

    # Convert state to JSON string (as it would be stored in database)
    mock_conversation["state"] = json.dumps(mock_conversation["state"])

    try:
        # Insert mock conversation
        result = db.client.table("agent_conversations").insert(mock_conversation).execute()
        if result.data:
            print(f"[MOCK] Created conversation: {mock_conversation['thread_id']}")
            return mock_conversation["thread_id"]
        else:
            print("[MOCK] Failed to create conversation")
            return None
    except Exception as e:
        print(f"[MOCK] Database error: {e}")
        # Return thread_id anyway for offline testing
        return mock_conversation["thread_id"]

def test_intelligent_jaa_complete():
    """Test the complete Intelligent JAA workflow"""
    print("\n=== TESTING INTELLIGENT JAA AGENT ===")
    print("Using Claude Opus 4 + LangGraph")

    # Step 1: Initialize JAA
    print("\n[STEP 1] Initializing Intelligent JAA...")
    jaa = JobAssessmentAgent()

    # Step 2: Create or use mock conversation
    print("\n[STEP 2] Setting up test conversation...")
    thread_id = create_mock_conversation()

    if not thread_id:
        print("Could not create test conversation, aborting")
        return False

    # Step 3: Process with Intelligent JAA
    print(f"\n[STEP 3] Processing conversation: {thread_id}")
    print("This will test the complete LangGraph workflow:")
    print("  - Stage 1: AI analyzes conversation with Claude Opus 4")
    print("  - Stage 2: AI extracts structured data")
    print("  - Stage 3: AI validates and enriches data")
    print("  - Stage 4: AI generates professional bid card")

    result = jaa.process_conversation(thread_id)

    # Step 4: Analyze results
    print("\n[STEP 4] Analyzing results...")

    if result.get("success"):
        print("\n*** INTELLIGENT JAA SUCCESS ***")
        print(f"Bid Card Number: {result['bid_card_number']}")
        print(f"Project Type: {result['bid_card_data']['project_type']}")
        print(f"Budget: ${result['bid_card_data']['budget_min']}-${result['bid_card_data']['budget_max']}")
        print(f"Urgency: {result['bid_card_data']['urgency_level']}")
        print(f"Complexity Score: {result['bid_card_data']['complexity_score']}")
        print(f"Intention Score: {result['bid_card_data']['intention_score']}")
        print(f"Database ID: {result['database_id']}")

        # Show AI-generated insights
        if "ai_insights" in result["bid_card_data"]:
            insights = result["bid_card_data"]["ai_insights"]
            print("\n--- AI ANALYSIS PREVIEW ---")
            analysis = insights.get("project_analysis", "")
            if analysis and len(analysis) > 100:
                print(f"{analysis[:300]}...")
            print(f"Generated by: {insights.get('generated_by')}")
            print(f"Generated at: {insights.get('generated_at')}")

        print("\n--- VALIDATION CHECKLIST ---")
        print("* LangGraph workflow completed")
        print("* Claude Opus 4 analysis generated")
        print("* Structured data extracted")
        print("* Bid card saved to database")
        print("* All InstaBids data points included")

        return True
    else:
        print("\n*** INTELLIGENT JAA FAILED ***")
        print(f"Error: {result.get('error')}")
        return False

def cleanup_test_data(thread_id):
    """Clean up test data"""
    try:
        # Remove test conversation
        db.client.table("agent_conversations").delete().eq("thread_id", thread_id).execute()
        print(f"[CLEANUP] Removed test conversation: {thread_id}")
    except Exception as e:
        print(f"[CLEANUP] Could not remove test data: {e}")

if __name__ == "__main__":
    print("INTELLIGENT JAA AGENT - FINAL VALIDATION TEST")
    print("=" * 50)

    success = test_intelligent_jaa_complete()

    if success:
        print("\n" + "=" * 50)
        print("SUCCESS: INTELLIGENT JAA AGENT FULLY OPERATIONAL")
        print("* Claude Opus 4 integration working")
        print("* LangGraph workflow executing correctly")
        print("* AI analysis and extraction functional")
        print("* Database integration successful")
        print("* Ready for production deployment")
        print("=" * 50)
    else:
        print("\n" + "=" * 50)
        print("WARNING: INTELLIGENT JAA AGENT NEEDS DEBUGGING")
        print("Check the error messages above")
        print("=" * 50)
