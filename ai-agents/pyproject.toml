[tool.ruff]
# Target Python 3.12 since that's what's installed
target-version = "py312"
line-length = 100

# Include all Python files in the project
include = [
    "*.py",
    "agents/**/*.py",
    "api/**/*.py",
    "database/**/*.py",
    "memory/**/*.py",
    "models/**/*.py",
    "routes/**/*.py",
    "scripts/**/*.py",
    "shared/**/*.py",
    "tests/**/*.py",
    "utils/**/*.py"
]

# Exclude generated files, migrations, and cache
exclude = [
    "__pycache__",
    ".git",
    ".pytest_cache",
    "*.egg-info",
    "migrations/*",
    "temp_*",
    "test_*.html",
    "*.log"
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",   # flake8-quotes
    "UP",  # pyupgrade
    "PT",  # flake8-pytest-style
    "RUF", # Ruff-specific rules
]

# Ignore specific rules that might be too strict for AI/ML code
ignore = [
    "E501",   # Line too long (handled by line-length setting)
    "B008",   # Do not perform function calls in argument defaults (common in FastAPI)
    "B904",   # Within an `except` clause, raise exceptions with `raise ... from err`
    "PIE804", # Unnecessary `dict` kwargs
    "SIM108", # Use ternary operator instead of if-else-block
    "UP007",  # Use `X | Y` for type annotations (not always clearer)
    "PT009",  # Use a regular `assert` instead of unittest-style
]

[tool.ruff.lint.per-file-ignores]
# Test files can be less strict
"test_*.py" = [
    "S101",  # Use of assert detected
    "B011",  # Do not call assert False since python -O removes these calls
    "PLR2004", # Magic value used in comparison
]

# Configuration files can have imports at module level
"config.py" = ["F401"]
"settings.py" = ["F401"]

[tool.ruff.lint.isort]
# Configure import sorting
known-first-party = ["agents", "api", "database", "models", "routes", "shared", "utils"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.flake8-type-checking]
# Allow runtime checking of type annotations
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# Format docstrings
docstring-code-format = true
docstring-code-line-length = 80